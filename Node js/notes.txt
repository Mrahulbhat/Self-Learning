Introduction:
- Node.js is an open-source and cross-platform JavaScript runtime environment. It is a popular tool for almost any kind of project!
- Node.js runs the V8 JavaScript engine, the core of Google Chrome, outside of the browser. This allows Node.js to be very performant.
- It runs in a single process (single thread) and doesnot create a new thread for every single request.
- Asyncronous in nature and hence doesnot get affected get blocked.

Uses:
- File system access: Provides API's to read and write files directly (which is not possible in browser for security reasons).
- Server side Capabilities: Node js enables JS to run on the server, handle Http requests, file operations, and other server side functionalities.
- Modules: Organize code into modules which can be reused using require().

Features removed in Node.js ❌ :
- Window object.
- DOM manipulation.
- BOM features like navigation etc.
- Web specific API's: Local Storage, Session storage, Cookies.

JavaScript on Web Server:
- Database Management: Crud operations.
- Authentication, Authorization.
- Input Validation.
- Session Management.
- API Management.
- Error Handling.
- Security measures.
- Data Encryption.
- Logging and Monitoring.
- Real Time Data Apps: like chat apps and live updates, using WebSockets.

JavaScript is also used to make Build Tools: Powers build processes for front-end tech using tools like Webpack, etc.

=======================================================================================================

Server Architecture with Node.js:
- User/Device: Web page -> Browser -> Device(user).
- Frontend/Client-Side (HTML,CSS,JS,REACT,etc) : This is sent as Web page to the user device.
- Backend/Server-Side (Node.js).

Node.js Server: 
- Create server and listen to incoming requests.
- Validation, DB connection, data processing.
- return response in form of HTML, JSON, CSS, JS.

REPL VS RELP:

REPL: READ,EVAL,PRINT,LOOP.
RELP: READ,EVAL,LOOP,PRINT.

REPL:
- Executes JS code interactively.
- Quick Testing and Debugging
- Session Management: Supports saving (.save) and loading (.load) code sessions.
- Node.js API Access.
- Allows customization of prompt and other settings.

===========================================================================================================

How DNS Works?
-> Domain Name System: Imagine a container which stores a domain with a Address.
-> How will we search Google.com , we will type it rather than 87.222.xxxxx...

Example: 
Where is google.com? => Now it checks in DNS and returns the address => Now, it will go to that address to access google.com.

Exact working: 
1. Domain Name Entry: User searches/types a domain (www.google.com) into browser.
2. DNS Query: Browser send a DNS query.
3. DNS Server: Returns the correct IP address of that domain.
4. Browser Connects: The browser uses the IP to connect to the web server and loads the website.


But to be very precise:
1. Root DNS: It is starting point for DNS resolution. It connects to correct TLD server (.com, .org) etc.
2. TLD DNS (Top level Domain): Handles queries for specific top level domains (.com, .net) and directs them to the authoritative DNS server.
3. Authoritative DNS: contains actual IP address of the domain and returns this IP address as answer to the query.

=======================================================================================================

How Web Works?
1. Client Request initiation: Client enters the url in browser hence initiates a network call.
2. DNS Resolution: The browser contacts a DNS server to get IP address of the domain.
3. TCP connection: The browser establishes a TCP connection with the server's IP address.
4. HTTP Request: The browser sends a HTTP request to the server.
5. Server processing: The server processes the request and prepares a response.
6. HTTP Response: The server sends a HTTP response back to the client.
7. Network Transmission: The response travels back to the client.
8. Client Recieves Response: Browser recieves and interprets the response.
9. Rendering: The browser renders the content of the response and displays to the user.

HTTP VS HTTPS Protocol:
Http: Hyper text transfer protocol: 
- Facilitates communication btw a web browser and a server.
- Sends data in plain text (no encryption).
- Used for basic website browsing without security

HTTPS: Http Secure:
- Secure version of Http.
- Encrypts data for secure communication (middle data is encrypted so no one can attack).
- Use SSL/TSL to encrypt data.
- Used in online banking, e-commerce.

TCP (Transmission Control Protocol):
- Ensures reliable connection before data is transferred.

=======================================================================================================

Node Core Modules: 
- Built-in: Core modules are included with Node.js installation.
- No installation needed: directly used without npm install.
- Performance: High performace with good speed.

1. fs (File System): Handles file operations like reading and wrtiting files.
2. HTTP, HTTPS
3. path: Provides utilities for handling and transforming file.
4. path.os: Provides OS related utility methods and properties
5. events: Handles events and event driven programming.
6. cryto: Provides crypto fn like hashing and encryption.
7. url: Pastes and formats URL strings. 

=======================================================================================================

require() ?
- Imports modules in Node.js.
- Caching: Modules are catched until server closes.
- Node.js searches for modules in core, node_modules and the file paths.

syntax: const <name> = require('module'); // no need of .js extention
Ex: const http = require('http);

=======================================================================================================

Creating Node Server:

const http = require('http');

 const server = http.createServer((req,res)=>{
    console.log(req);
 });

 const port = 3000;

 server.listen(port, () => {
    console.log('Server running on port: '+ port);
 });

//server established.

=======================================================================================================